name: NuGet Package Publishing

on:
  push:
    branches: [ main ]
    paths:
      - 'src/**/*.csproj'
  pull_request:
    branches: [ main ]
    paths:
      - 'src/**/*.csproj'
  workflow_dispatch: # Enable manual trigger

jobs:
  build-and-publish:
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0 # Important for GitVersion or for checking version changes
      
      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: |
            9.0.x
      
      - name: Restore dependencies
        run: dotnet restore
      
      - name: Build
        run: dotnet build --configuration Release --no-restore
      
      - name: Test
        run: dotnet test --configuration Release --no-build --verbosity normal
      
      - name: Check Version Changes
        id: check-versions
        shell: pwsh
        run: | # Get all project files
          $projectFiles = Get-ChildItem -Path ./src -Filter *.csproj -Recurse
          
          # Array to store projects with version changes
          $projectsToPublish = @()
          
          foreach ($project in $projectFiles) {
            $projectPath = $project.FullName
            $projectName = $project.Name
            
            # Get version from current commit
            $currentVersion = Select-Xml -Path $projectPath -XPath "/Project/PropertyGroup/VersionPrefix/text()" | Select-Object -ExpandProperty Node | Select-Object -ExpandProperty Value
            
            if (!$currentVersion) {
              Write-Host "No VersionPrefix found for $projectName, skipping"
              continue
            }
            
            Write-Host "Found version $currentVersion for $projectName"
            
            # Check if this is a PR or push to main (not applicable for manual triggers)
            if ($env:GITHUB_EVENT_NAME -eq 'pull_request' -or $env:GITHUB_EVENT_NAME -eq 'push') {
              # Get the commit before this one
              $baseCommit = git rev-parse HEAD~1
              
              # Get project file content from previous commit
              $previousContent = git show "$baseCommit`:$($projectPath.Replace('\', '/'))"
              
              if ($previousContent) {
                # Create a temp file to hold previous content
                $tempFile = New-TemporaryFile
                [System.IO.File]::WriteAllText($tempFile.FullName, $previousContent)
                
                # Extract previous version
                try {
                  $previousVersion = Select-Xml -Path $tempFile.FullName -XPath "/Project/PropertyGroup/VersionPrefix/text()" | Select-Object -ExpandProperty Node | Select-Object -ExpandProperty Value
                  Remove-Item -Path $tempFile.FullName -Force
                }
                catch {
                  Write-Host "Error extracting previous version: $_"
                  $previousVersion = $null
                }
                
                if ($previousVersion -and $previousVersion -ne $currentVersion) {
                  Write-Host "Project $projectName version changed from $previousVersion to $currentVersion"
                  $projectsToPublish += $projectPath
                }
                else {
                  Write-Host "Project $projectName version unchanged, skipping"
                }
              }
              else {
                Write-Host "No previous commit content found for $projectName"
                # New project, publish it
                $projectsToPublish += $projectPath
              }
            }
            else {
              # Manual trigger, include all projects
              Write-Host "Manual trigger, including $projectName"
              $projectsToPublish += $projectPath
            }
          }
          
          # Convert to JSON and set output
          $projectsToPublishJson = ConvertTo-Json -InputObject $projectsToPublish -Compress
          echo "projects=$projectsToPublishJson" >> $env:GITHUB_OUTPUT
          
          # Check if any projects need publishing
          if ($projectsToPublish.Count -gt 0) {
            echo "has_changes=true" >> $env:GITHUB_OUTPUT
          }
          else {
            echo "has_changes=false" >> $env:GITHUB_OUTPUT
          }
      
      - name: Pack NuGet packages
        if: steps.check-versions.outputs.has_changes == 'true'
        id: pack
        shell: pwsh
        run: |
          $projectsToPublish = ConvertFrom-Json -InputObject '${{ steps.check-versions.outputs.projects }}'
          
          foreach ($projectPath in $projectsToPublish) {
            Write-Host "Packing $projectPath"
            dotnet pack $projectPath --configuration Release --no-build --output ./nupkgs
          }
      
      - name: Setup NuGet
        if: steps.check-versions.outputs.has_changes == 'true' && github.event_name != 'pull_request' && github.ref == 'refs/heads/main'
        uses: NuGet/setup-nuget@v1
        with:
          nuget-api-key: ${{ secrets.NUGET_API_KEY }}          
      - name: Publish to NuGet
        if: steps.check-versions.outputs.has_changes == 'true' && github.event_name != 'pull_request' && github.ref == 'refs/heads/main'
        shell: pwsh
        run: |
          # Push main packages
          foreach ($package in Get-ChildItem -Path ./nupkgs -Filter *.nupkg) {
            Write-Host "Publishing $($package.Name)"
            dotnet nuget push $package.FullName --api-key ${{ secrets.NUGET_API_KEY }} --source https://api.nuget.org/v3/index.json --skip-duplicate
          }
          
          # Push symbol packages
          foreach ($symbolPackage in Get-ChildItem -Path ./nupkgs -Filter *.snupkg) {
            Write-Host "Publishing symbol package $($symbolPackage.Name)"
            dotnet nuget push $symbolPackage.FullName --api-key ${{ secrets.NUGET_API_KEY }} --source https://api.nuget.org/v3/index.json --skip-duplicate
          }
